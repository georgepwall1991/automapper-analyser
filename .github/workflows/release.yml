name: Release to NuGet

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags (e.g., v2.0.0, v2.1.0, v2.0.1)

permissions:
  contents: write  # Required for creating GitHub releases
  packages: write  # Required for publishing packages

jobs:
  release:
    name: Build, Test, and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Extract version from tag
        id: get_version
        run: |
          # Remove 'v' prefix from tag to get semantic version
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build analyzer
        run: dotnet build src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj --configuration Release --no-restore

      - name: Build test project
        run: dotnet build tests/AutoMapperAnalyzer.Tests/AutoMapperAnalyzer.Tests.csproj --configuration Release --no-restore

      - name: Run all tests
        run: dotnet test tests/AutoMapperAnalyzer.Tests/AutoMapperAnalyzer.Tests.csproj --configuration Release --no-build --verbosity normal

      - name: Pack analyzer with version from tag
        run: |
          dotnet pack src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj \
            --configuration Release \
            --no-build \
            --output ./nupkg \
            /p:PackageVersion=${{ steps.get_version.outputs.VERSION }}

      - name: Verify package contents
        run: |
          echo "=== Package created ==="
          ls -lh ./nupkg/*.nupkg
          echo ""
          echo "=== Package contents ==="
          unzip -l ./nupkg/*.nupkg | grep -E "(analyzers|\.dll)"

      - name: Publish to NuGet
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract release notes from CHANGELOG.md for this version
          if [ -f CHANGELOG.md ]; then
            # Try to extract section for this version
            NOTES=$(sed -n "/## \[${{ steps.get_version.outputs.VERSION }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
            if [ -z "$NOTES" ]; then
              NOTES="See CHANGELOG.md for details."
            fi
          else
            NOTES="Release ${{ steps.get_version.outputs.VERSION }}"
          fi

          # Save to file to preserve multi-line content
          cat > release_notes.txt << 'EOF'
          $NOTES

          ## Installation

          ```bash
          dotnet add package AutoMapperAnalyzer.Analyzers --version ${{ steps.get_version.outputs.VERSION }}
          ```

          ## NuGet Package

          ðŸ“¦ [AutoMapperAnalyzer.Analyzers on NuGet](https://www.nuget.org/packages/AutoMapperAnalyzer.Analyzers/${{ steps.get_version.outputs.VERSION }})
          EOF

          echo "NOTES_FILE=release_notes.txt" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.TAG }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: |
            ./nupkg/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./nupkg/*.nupkg
          retention-days: 90
