name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'automapper-analyser.sln'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build analyzer and code fixes
        run: |
          echo "Building analyzer and code fixes..."
          dotnet build src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj --no-restore --configuration Release
          dotnet build src/AutoMapperAnalyzer.CodeFixes/AutoMapperAnalyzer.CodeFixes.csproj --no-restore --configuration Release

      - name: Build test project
        run: |
          echo "Building test project..."
          dotnet build tests/AutoMapperAnalyzer.Tests/AutoMapperAnalyzer.Tests.csproj --no-restore --configuration Release

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          dotnet test tests/AutoMapperAnalyzer.Tests/AutoMapperAnalyzer.Tests.csproj --no-build --configuration Release --verbosity normal

      - name: Build samples (with analyzer warnings)
        run: |
          echo "Building samples project (expects analyzer warnings for demonstration)..."
          dotnet build samples/AutoMapperAnalyzer.Samples/AutoMapperAnalyzer.Samples.csproj --configuration Release --verbosity minimal
          echo "‚úÖ Samples built successfully (analyzer warnings are expected and desired)"

  compatibility-test:
    name: Multi-Framework Compatibility Test
    runs-on: windows-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET (multiple versions)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build analyzer
        run: |
          echo "Building analyzer for compatibility testing..."
          dotnet build src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj --configuration Release
          dotnet build src/AutoMapperAnalyzer.CodeFixes/AutoMapperAnalyzer.CodeFixes.csproj --configuration Release

      - name: Test .NET Framework 4.8 compatibility
        run: |
          Write-Host "üß™ Testing .NET Framework 4.8 compatibility..." -ForegroundColor Cyan
          cd test-install/NetFrameworkTest
          dotnet restore
          
          # Build and capture output - should succeed with warnings
          $output = dotnet build --no-restore --verbosity normal 2>&1
          $buildSucceeded = $LASTEXITCODE -eq 0
          $hasAnalyzerWarnings = ($output -match "AM001") -or ($output -match "AM004") -or ($output -match "AM030")
          
          Write-Host "Build Output:" -ForegroundColor Yellow
          Write-Host $output
          
          if ($buildSucceeded -and $hasAnalyzerWarnings) {
            Write-Host "‚úÖ .NET Framework 4.8 compatibility verified" -ForegroundColor Green
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Cyan
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå .NET Framework 4.8 compatibility test failed" -ForegroundColor Red
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Red
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Red
            exit 1
          }
        shell: pwsh

      - name: Test .NET 6.0 compatibility
        run: |
          Write-Host "üß™ Testing .NET 6.0 compatibility..." -ForegroundColor Cyan
          cd test-install/NetCoreTest
          dotnet restore
          
          # Build and capture output - should succeed with warnings
          $output = dotnet build --no-restore --verbosity normal 2>&1
          $buildSucceeded = $LASTEXITCODE -eq 0
          $hasAnalyzerWarnings = ($output -match "AM001") -or ($output -match "AM004") -or ($output -match "AM030")
          
          Write-Host "Build Output:" -ForegroundColor Yellow
          Write-Host $output
          
          if ($buildSucceeded -and $hasAnalyzerWarnings) {
            Write-Host "‚úÖ .NET 6.0 compatibility verified" -ForegroundColor Green
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Cyan
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå .NET 6.0 compatibility test failed" -ForegroundColor Red
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Red
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Red
            exit 1
          }
        shell: pwsh

      - name: Test .NET 9.0 compatibility
        run: |
          Write-Host "üß™ Testing .NET 9.0 compatibility..." -ForegroundColor Cyan
          cd test-install/TestPackage
          dotnet restore
          
          # Build and capture output - should succeed with warnings
          $output = dotnet build --no-restore --verbosity normal 2>&1
          $buildSucceeded = $LASTEXITCODE -eq 0
          $hasAnalyzerWarnings = ($output -match "AM001") -or ($output -match "AM004") -or ($output -match "AM030")
          
          Write-Host "Build Output:" -ForegroundColor Yellow
          Write-Host $output
          
          if ($buildSucceeded -and $hasAnalyzerWarnings) {
            Write-Host "‚úÖ .NET 9.0 compatibility verified" -ForegroundColor Green
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Cyan
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå .NET 9.0 compatibility test failed" -ForegroundColor Red
            Write-Host "  - Build succeeded: $buildSucceeded" -ForegroundColor Red
            Write-Host "  - Analyzer warnings detected: $hasAnalyzerWarnings" -ForegroundColor Red
            exit 1
          }
        shell: pwsh

      - name: Run comprehensive compatibility test
        run: |
          Write-Host "üîç Running comprehensive compatibility test..." -ForegroundColor Cyan
          cd test-install
          pwsh test-compatibility.ps1 -SkipBuild
        shell: pwsh

  package:
    name: Package Analyzer
    needs: [build, compatibility-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution (excluding samples)
        run: |
          # Build main projects but exclude samples to avoid analyzer errors failing the build
          dotnet build src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj --no-restore --configuration Release
          dotnet build src/AutoMapperAnalyzer.CodeFixes/AutoMapperAnalyzer.CodeFixes.csproj --no-restore --configuration Release

      - name: Pack analyzer
        run: dotnet pack src/AutoMapperAnalyzer.Analyzers/AutoMapperAnalyzer.Analyzers.csproj --no-build --configuration Release --output ./packages

      - name: Pack code fixes
        run: dotnet pack src/AutoMapperAnalyzer.CodeFixes/AutoMapperAnalyzer.CodeFixes.csproj --no-build --configuration Release --output ./packages

      - name: Upload packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg
