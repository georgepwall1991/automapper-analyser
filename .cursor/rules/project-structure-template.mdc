---
description: 
globs: 
alwaysApply: false
---
# AutoMapper Analyzer Project Structure

## Recommended Directory Structure
```
AutoMapperAnalyzer/
├── src/
│   ├── AutoMapperAnalyzer/
│   │   ├── Analyzers/
│   │   │   ├── AutoMapperAnalyzer.cs
│   │   │   ├── TypeMismatchAnalyzer.cs
│   │   │   ├── MissingPropertyAnalyzer.cs
│   │   │   ├── ConfigurationAnalyzer.cs
│   │   │   └── PerformanceAnalyzer.cs
│   │   ├── CodeFixes/
│   │   │   ├── AutoMapperCodeFixProvider.cs
│   │   │   ├── AddMappingCodeFix.cs
│   │   │   ├── AddConverterCodeFix.cs
│   │   │   └── FixNullabilityCodeFix.cs
│   │   ├── Diagnostics/
│   │   │   ├── DiagnosticDescriptors.cs
│   │   │   └── DiagnosticCategories.cs
│   │   ├── Helpers/
│   │   │   ├── TypeSymbolExtensions.cs
│   │   │   ├── SyntaxNodeExtensions.cs
│   │   │   ├── AutoMapperHelper.cs
│   │   │   └── MappingAnalyzer.cs
│   │   └── AutoMapperAnalyzer.csproj
│   └── AutoMapperAnalyzer.Package/
│       ├── AutoMapperAnalyzer.Package.csproj
│       ├── tools/
│       │   └── install.ps1
│       └── AnalyzerReleases.Shipped.md
├── tests/
│   ├── AutoMapperAnalyzer.Tests/
│   │   ├── TypeMismatchAnalyzerTests.cs
│   │   ├── MissingPropertyAnalyzerTests.cs
│   │   ├── ConfigurationAnalyzerTests.cs
│   │   ├── CodeFixTests.cs
│   │   ├── Helpers/
│   │   │   ├── AnalyzerTestBase.cs
│   │   │   └── TestHelper.cs
│   │   └── AutoMapperAnalyzer.Tests.csproj
│   └── TestCases/
│       ├── ValidMappings/
│       ├── InvalidMappings/
│       └── EdgeCases/
├── samples/
│   ├── BasicUsage/
│   ├── ComplexScenarios/
│   └── IntegrationExamples/
├── docs/
│   ├── Diagnostics.md
│   ├── Usage.md
│   └── Contributing.md
├── automapper-analyser.sln
├── README.md
└── LICENSE
```

## Core Analyzer Files

### AutoMapperAnalyzer.cs
Main analyzer entry point that coordinates all sub-analyzers
```csharp
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class AutoMapperAnalyzer : DiagnosticAnalyzer
{
    // Main analyzer that delegates to specialized analyzers
}
```

### Specialized Analyzer Files
- **TypeMismatchAnalyzer.cs**: Handles AM001-AM003 (type safety)
- **MissingPropertyAnalyzer.cs**: Handles AM010-AM012 (missing properties)
- **ConfigurationAnalyzer.cs**: Handles AM040-AM042 (configuration issues)
- **PerformanceAnalyzer.cs**: Handles AM050-AM052 (performance warnings)

## Helper Classes

### TypeSymbolExtensions.cs
Extension methods for ITypeSymbol analysis
```csharp
public static class TypeSymbolExtensions
{
    public static bool IsAutoMapperProfile(this ITypeSymbol typeSymbol);
    public static bool IsCompatibleWith(this ITypeSymbol source, ITypeSymbol destination);
    public static IEnumerable<IPropertySymbol> GetMappableProperties(this ITypeSymbol type);
}
```

### AutoMapperHelper.cs
Core AutoMapper-specific logic
```csharp
public static class AutoMapperHelper
{
    public static bool IsCreateMapInvocation(InvocationExpressionSyntax invocation);
    public static bool IsForMemberInvocation(InvocationExpressionSyntax invocation);
    public static (ITypeSymbol Source, ITypeSymbol Dest) ExtractMappingTypes(InvocationExpressionSyntax createMap);
}
```

### MappingAnalyzer.cs
Complex mapping analysis logic
```csharp
public class MappingAnalyzer
{
    public MappingAnalysisResult AnalyzeMapping(ITypeSymbol source, ITypeSymbol dest);
    public IEnumerable<PropertyMismatch> FindPropertyMismatches(ITypeSymbol source, ITypeSymbol dest);
}
```

## Test Organization

### Test Categories
1. **Unit Tests**: Individual analyzer components
2. **Integration Tests**: End-to-end analyzer behavior
3. **Performance Tests**: Analyzer performance benchmarks
4. **Regression Tests**: Previously fixed issues

### Test File Naming Convention
- `{AnalyzerName}Tests.cs` for analyzer tests
- `{FeatureName}CodeFixTests.cs` for code fix tests
- `{Scenario}IntegrationTests.cs` for integration tests

### Test Helper Base Classes
```csharp
public abstract class AnalyzerTestBase<T> where T : DiagnosticAnalyzer, new()
{
    protected abstract T CreateAnalyzer();
    protected Task VerifyAnalyzerAsync(string source, params DiagnosticResult[] expected);
}

public abstract class CodeFixTestBase<TAnalyzer, TCodeFix> 
    where TAnalyzer : DiagnosticAnalyzer, new()
    where TCodeFix : CodeFixProvider, new()
{
    protected Task VerifyCodeFixAsync(string source, string expected, params DiagnosticResult[] diagnostics);
}
```

## Package Configuration

### AutoMapperAnalyzer.csproj (Main Project)
```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.0.1" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all" />
  </ItemGroup>
  
  <ItemGroup>
    <Analyzer Include="$(OutputPath)\$(AssemblyName).dll" />
  </ItemGroup>
</Project>
```

### AutoMapperAnalyzer.Package.csproj (NuGet Package)
```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <PackageId>AutoMapperAnalyzer</PackageId>
    <PackageVersion>1.0.0</PackageVersion>
    <Authors>Your Name</Authors>
    <Description>Roslyn analyzer for AutoMapper that detects mapping issues at compile-time</Description>
    <PackageTags>roslyn;analyzer;automapper;codeanalysis</PackageTags>
    <DevelopmentDependency>true</DevelopmentDependency>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_AddAnalyzersToOutput</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
</Project>
```

## Build and CI Configuration

### Build Scripts
- **build.ps1**: PowerShell build script for Windows
- **build.sh**: Bash build script for Linux/macOS
- **Directory.Build.props**: Shared MSBuild properties

### CI/CD Pipeline (GitHub Actions)
```yaml
name: CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
```

## Documentation Files

### Required Documentation
1. **README.md**: Project overview, installation, basic usage
2. **Diagnostics.md**: Complete list of all diagnostics with examples
3. **Usage.md**: Detailed usage instructions and configuration
4. **Contributing.md**: Guidelines for contributors
5. **CHANGELOG.md**: Version history and changes

### Code Documentation
- XML documentation comments on all public APIs
- Inline comments for complex analyzer logic
- Examples in documentation showing before/after code
