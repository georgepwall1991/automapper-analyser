---
description: 
globs: 
alwaysApply: false
---
# Test-Driven Development (TDD) Approach

## TDD Principles for AutoMapper Analyzer

### Development Cycle
1. **Red Phase**: Write a failing test that defines the expected behavior
2. **Green Phase**: Write minimal code to make the test pass
3. **Refactor Phase**: Clean up and optimize while keeping tests green
4. **Repeat**: Move to the next test case

### Iterative Development Approach
- **Complete one task at a time (x.x format)** - Stop after each task completion
- **Update progress tracking** after each task
- **Verify all acceptance criteria** before moving to next task
- **Get user confirmation** before proceeding to next iteration
- **Maintain momentum** while ensuring quality gates are met

### Test-First Requirements
- **Every diagnostic rule must start with failing tests**
- **Every code fix must have corresponding tests**
- **Performance requirements must be tested**
- **Edge cases must be covered by tests**

### Test Structure
```
Tests/
├── AnalyzerTests/
│   ├── TypeSafetyAnalyzerTests.cs
│   ├── MissingPropertyAnalyzerTests.cs
│   └── ...
├── CodeFixTests/
│   ├── TypeMismatchCodeFixTests.cs
│   └── ...
├── IntegrationTests/
│   ├── RealWorldScenariosTests.cs
│   └── ...
└── PerformanceTests/
    └── LargeCodebaseTests.cs
```

### Test Categories

#### 1. Analyzer Tests
- Test diagnostic detection accuracy
- Test diagnostic message content
- Test diagnostic severity levels
- Test diagnostic location reporting

#### 2. Code Fix Tests
- Test code fix availability
- Test code fix correctness
- Test code fix application
- Test multiple fix options

#### 3. Integration Tests
- Test with real AutoMapper scenarios
- Test with complex project structures
- Test analyzer interactions
- Test end-to-end workflows

#### 4. Performance Tests
- Test analysis speed on large files
- Test memory usage patterns
- Test scalability with project size
- Test incremental analysis

### Test Data Management
- Use embedded test code as strings
- Create reusable test helpers
- Maintain sample project for integration tests
- Keep test data focused and minimal

### Quality Gates
- All tests must pass before commit
- Test coverage must be >90%
- Performance tests must meet targets
- No false positives in integration tests

### TDD Benefits for Analyzer Development
1. **Clear Requirements**: Tests define exact behavior expected
2. **Regression Prevention**: Changes don't break existing functionality
3. **Documentation**: Tests serve as living documentation
4. **Confidence**: Refactoring is safe with comprehensive tests
5. **Design Quality**: TDD leads to better API design
