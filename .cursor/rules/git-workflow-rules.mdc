---
description: 
globs: 
alwaysApply: true
---
# Git Workflow and Commit Rules

## MANDATORY Git Commit Requirements

### After Each Development Iteration
**CRITICAL RULE**: After every development iteration where tests pass successfully, commit changes to git with a descriptive commit message.

### Iteration Definition
An **iteration** is complete when:
1. Code changes are implemented
2. Unit tests are written/updated and passing
3. Integration tests pass (if applicable)
4. Code quality checks pass
5. Documentation is updated (if needed)
6. All CI/CD pipeline jobs succeed

### Commit Message Format
Use conventional commit format with this structure:
```
<type>(<scope>): <description>

[optional body explaining what and why]

[optional footer with breaking changes or issue refs]
```

### Commit Types
- **feat**: New feature or analyzer rule implementation
- **fix**: Bug fix or correction to existing functionality
- **test**: Adding, updating, or fixing tests
- **docs**: Documentation changes or updates
- **refactor**: Code refactoring without functional changes
- **perf**: Performance improvements
- **chore**: Build process, tooling, or maintenance tasks
- **ci**: CI/CD pipeline changes
- **style**: Code style changes (formatting, missing semicolons, etc.)

### Scope Examples for AutoMapper Analyzer
- **analyzer**: Core analyzer implementations
- **codefix**: Code fix providers
- **diagnostics**: Diagnostic rule definitions
- **tests**: Test-related changes
- **samples**: Sample code updates
- **rules**: Rule documentation updates
- **workflow**: CI/CD or development workflow changes

### Examples of Excellent Commit Messages

#### Feature Implementation
```
feat(analyzer): implement AM001 property type mismatch detection

- Add analyzer to detect incompatible property types between source/destination
- Include logic for handling nullable reference types
- Support for custom type converters validation
- Add comprehensive test coverage for edge cases

Closes #15
```

#### Bug Fix
```
fix(codefix): resolve null reference in type conversion suggestions

The code fix provider was throwing NRE when suggesting conversions
for properties with complex generic types. Added null checks and
improved type resolution logic.

Fixes #23
```

#### Test Addition
```
test(AM002): add comprehensive nullable mapping test cases

- Cover nullable to non-nullable scenarios
- Test nullable reference types with different contexts
- Add edge cases for nullable value types
- Verify diagnostic messages accuracy
```

#### Documentation Update
```
docs(rules): update AutoMapper diagnostic codes documentation

- Add detailed descriptions for AM001-AM005
- Include code examples for each diagnostic
- Update troubleshooting guide
- Add links to related AutoMapper documentation
```

#### Refactoring
```
refactor(analyzer): extract common type checking logic

Consolidated duplicate type comparison logic into shared utilities.
No functional changes, improves code maintainability and reduces
duplication across analyzer implementations.
```

#### Performance Improvement
```
perf(analyzer): optimize property discovery for large DTOs

- Cache property reflection results
- Use concurrent collections for thread safety
- Reduce memory allocations in hot paths
- 40% improvement in analysis time for large object graphs
```

### When to Commit

#### Mandatory Commit Points
1. **After successful test runs** - All unit tests pass locally
2. **After implementing analyzer rules** - New diagnostic completed and tested
3. **After implementing code fixes** - Code fix providers working correctly
4. **After significant refactoring** - Code improved without breaking functionality
5. **After documentation updates** - Rules, examples, or README updated
6. **After CI/CD changes** - Pipeline modifications tested and verified
7. **Before switching contexts** - End of work session or task switching

#### Good Commit Frequency
- Commit small, logical changes frequently
- Each commit should represent a complete, working unit of change
- Avoid mixing unrelated changes in a single commit
- Prefer multiple focused commits over large omnibus commits

### Pre-Commit Checklist

Before committing, ensure:
- [ ] All tests pass locally (`dotnet test`)
- [ ] Code compiles without warnings
- [ ] New code follows project style guidelines
- [ ] Documentation updated if public API changed
- [ ] Commit message follows conventional format
- [ ] Changes are logically grouped
- [ ] No debugging code or temporary changes included
- [ ] Large files or sensitive data excluded

### What to Include in Commits

#### Always Include
- Source code changes (.cs files)
- Test files (.cs test files)
- Project configuration (.csproj, .sln)
- Documentation updates (.md files)
- CI/CD configuration changes (.yml files)

#### Never Include
- Build outputs (bin/, obj/ directories)
- IDE-specific files (.vs/, .idea/)
- User-specific settings
- Temporary or debug files
- Large binary files
- Sensitive information (keys, passwords)

### Branch Strategy and Commit Rules

#### Main Branch
- Only commits via Pull Request
- All commits must have passed CI/CD
- Squash commits for cleaner history
- Conventional commit messages required

#### Develop Branch
- Integration testing branch
- All feature branches merge here first
- Regular commits with good messages
- Automated testing triggered on each commit

#### Feature Branches
- Use descriptive branch names: `feature/AM001-type-mismatch-analyzer`
- Commit frequently with descriptive messages
- Rebase before merging to maintain clean history
- Delete after successful merge

### Automated Commits

#### CI/CD Pipeline Commits
The pipeline automatically commits with these messages:
- `chore: auto-commit after successful test iteration - [job-name]`
- `chore: auto-commit after successful test iteration - Complete iteration with all tests passing`

#### Local Development Automation
Consider using git hooks for:
- Pre-commit: Run tests and linting
- Commit-msg: Validate commit message format
- Pre-push: Ensure all tests pass before pushing

### Commit Message Quality Guidelines

#### Good Commit Messages
- Start with imperative verb (add, fix, update, remove)
- Keep subject line under 50 characters
- Use body to explain what and why, not how
- Reference issues and pull requests when relevant
- Be specific about what changed

#### Examples of Poor vs Good Messages

**Poor:**
```
fix stuff
update code
changes
wip
```

**Good:**
```
feat(analyzer): add property type validation for AutoMapper
fix(codefix): handle null reference in type converter suggestion
test(AM001): add edge cases for generic type mapping
docs(readme): update installation and usage instructions
```

### Integration with Development Workflow

#### TDD Cycle with Commits
1. **Red**: Write failing test → `test: add failing test for [feature]`
2. **Green**: Make test pass → `feat: implement [feature] to pass tests`
3. **Refactor**: Improve code → `refactor: optimize [component] implementation`

#### Code Review Integration
- Commit messages help reviewers understand changes
- Good commit history enables better code reviews
- Atomic commits make reverting changes safer
- Clear messages reduce review time

### Emergency Procedures

#### Hotfix Commits
For critical production issues:
```
hotfix(analyzer): fix critical null reference in AM001

Emergency fix for NullReferenceException in property type checking
that was causing analyzer crashes in VS 2022.

Impacts: All users running version 1.2.0
Testing: Verified fix locally, deploying immediately
```

#### Rollback Strategy
- Use `git revert` for public commits
- Include reason for rollback in commit message
- Reference original commit being reverted
- Test rollback thoroughly before pushing

This comprehensive git workflow ensures that every development iteration results in a meaningful commit that documents progress, maintains code quality, and enables effective collaboration.
