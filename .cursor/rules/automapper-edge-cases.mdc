---
description: 
globs: 
alwaysApply: false
---
# AutoMapper Edge Cases and Advanced Scenarios

## Complex Type Conversion Edge Cases

### AM070: Enum Conversion Issues
```csharp
// Different enum types with same values
enum SourceStatus { Active = 1, Inactive = 2 }
enum DestStatus { Enabled = 1, Disabled = 2 }

class Source { public SourceStatus Status { get; set; } }
class Dest { public DestStatus Status { get; set; } }
// Requires explicit enum conversion mapping
```

### AM071: Generic Type Constraints
```csharp
// Generic types with different constraints
class Source<T> where T : class { public T Data { get; set; } }
class Dest<T> where T : struct { public T Data { get; set; } }
// Incompatible generic constraints
```

### AM072: Inheritance Hierarchy Mismatches
```csharp
class BaseSource { public string Name { get; set; } }
class DerivedSource : BaseSource { public int Value { get; set; } }

class BaseDest { public string Name { get; set; } }
class DerivedDest : BaseDest { public string Value { get; set; } } // Type changed!

// Mapping DerivedSource -> DerivedDest has type conflict in Value property
```

## Dynamic and Runtime Type Issues

### AM080: Dynamic Property Mapping
```csharp
class Source { public dynamic Data { get; set; } }
class Dest { public string Data { get; set; } }
// Cannot validate dynamic -> string conversion at compile time
```

### AM081: Expression Tree Limitations
```csharp
.ForMember(dest => dest.Value, opt => opt.MapFrom(src => 
    src.SomeMethod())) // Method calls in expressions may not be supported
```

### AM082: Reflection-Based Mapping
```csharp
// Properties determined at runtime
.ForMember(dest => dest.GetType().GetProperty("DynamicProp"), 
           opt => opt.MapFrom(src => src.GetValue()))
```

## Collection and Array Complexities

### AM090: Multidimensional Arrays
```csharp
class Source { public int[,] Matrix { get; set; } }
class Dest { public int[][] JaggedArray { get; set; } }
// Incompatible array structures
```

### AM091: Collection Interface Mismatches
```csharp
class Source { public IEnumerable<string> Items { get; set; } }
class Dest { public ISet<string> Items { get; set; } }
// May lose ordering or allow duplicates
```

### AM092: Custom Collection Types
```csharp
class CustomList<T> : List<T> { /* custom behavior */ }
class Source { public CustomList<int> Values { get; set; } }
class Dest { public List<int> Values { get; set; } }
// Loses custom collection behavior
```

## Memory and Performance Edge Cases

### AM100: Large Object Heap Concerns
```csharp
class Source { public byte[] LargeData { get; set; } } // 85KB+ arrays
class Dest { public byte[] LargeData { get; set; } }
// Deep copying large arrays impacts performance
```

### AM101: Circular Reference Detection
```csharp
class Node 
{ 
    public Node Parent { get; set; }
    public List<Node> Children { get; set; }
    public Node Self => this; // Self-reference
}
// Complex circular reference patterns
```

### AM102: Lazy Loading and Proxy Objects
```csharp
// Entity Framework lazy loading proxies
class BlogPost 
{ 
    public virtual ICollection<Comment> Comments { get; set; } // Lazy loaded
}
// Mapping may trigger N+1 queries
```

## Security and Validation Edge Cases

### AM110: Property Access Restrictions
```csharp
class Source 
{ 
    public string PublicData { get; set; }
    internal string InternalData { get; set; }
    private string PrivateData { get; set; }
}
class Dest 
{ 
    public string PublicData { get; set; }
    public string InternalData { get; set; } // Visibility escalation
    public string PrivateData { get; set; } // Cannot access private
}
```

### AM111: Sensitive Data Exposure
```csharp
class UserEntity 
{ 
    public string Username { get; set; }
    public string PasswordHash { get; set; }
    public string SocialSecurityNumber { get; set; }
}
class UserDto 
{ 
    public string Username { get; set; }
    public string PasswordHash { get; set; } // Should not be exposed!
    public string SocialSecurityNumber { get; set; } // PII exposure!
}
```

## Threading and Concurrency Issues

### AM120: Thread Safety Concerns
```csharp
// Static mapper configuration in multi-threaded environment
Mapper.Initialize(cfg => { /* not thread-safe during config */ });
```

### AM121: Async/Await in Converters
```csharp
.ForMember(dest => dest.Data, opt => opt.ConvertUsing(async src => 
    await GetDataAsync(src.Id))) // Async converters not supported
```

## Framework Integration Complications

### AM130: JSON Serialization Conflicts
```csharp
class Source 
{ 
    [JsonPropertyName("user_name")]
    public string UserName { get; set; }
}
class Dest 
{ 
    [JsonPropertyName("username")]
    public string UserName { get; set; }
}
// JSON property names differ, may cause confusion
```

### AM131: Validation Attribute Mismatches
```csharp
class Source 
{ 
    [StringLength(50)]
    public string Name { get; set; }
}
class Dest 
{ 
    [StringLength(20)] // Shorter max length!
    public string Name { get; set; }
}
// Validation constraints conflict
```

### AM132: Entity Framework Navigation Properties
```csharp
class BlogEntity 
{ 
    public virtual ICollection<CommentEntity> Comments { get; set; }
}
class BlogDto 
{ 
    public List<CommentDto> Comments { get; set; }
}
// EF navigation property to regular collection
// May trigger unintended database queries
```

## Advanced Configuration Scenarios

### AM140: Conditional Mapping Logic
```csharp
.ForMember(dest => dest.Value, opt => opt.Condition(src => src.SomeFlag))
.ForMember(dest => dest.Value, opt => opt.MapFrom(src => src.AltValue))
// Conflicting conditional logic
```

### AM141: Custom Resolution Context
```csharp
.ForMember(dest => dest.Data, opt => opt.MapFrom((src, dest, destMember, context) => 
    context.Items["CustomData"])) // Context dependency may not be available
```

### AM142: Profile Inheritance Conflicts
```csharp
class BaseProfile : Profile 
{ 
    public BaseProfile() 
    { 
        CreateMap<Source, Dest>()
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName));
    }
}

class DerivedProfile : BaseProfile 
{ 
    public DerivedProfile() 
    { 
        CreateMap<Source, Dest>() // Overwrites base mapping
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.LastName));
    }
}
```

## Diagnostic Priority and Suppression

### Severity Assessment Rules
1. **Critical (Error)**: Runtime exceptions, data corruption
2. **High (Warning)**: Data loss, security issues
3. **Medium (Info)**: Performance concerns, best practices
4. **Low (Hidden)**: Style preferences, optional optimizations

### Suppression Scenarios
```csharp
[SuppressMessage("AutoMapper", "AM001", Justification = "Custom converter handles this")]
public class SpecialProfile : Profile { }
```
